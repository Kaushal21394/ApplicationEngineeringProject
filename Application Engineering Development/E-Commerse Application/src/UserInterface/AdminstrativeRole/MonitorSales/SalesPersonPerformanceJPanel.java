/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdminstrativeRole.MonitorSales;

import business.configuration.Business;
import business.market.Market;
import business.market.MarketOffer;
import business.sales.Order;
import business.sales.OrderItem;
import business.sales.Person;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chava
 */
public class SalesPersonPerformanceJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SalesPersonPerformanceJPanel
     */
    private JPanel userProcessContainer;
    private Business business;
    ArrayList<Person> personAbove = new ArrayList<Person>();
    ArrayList<Person> personBelow = new ArrayList<Person>();

    public SalesPersonPerformanceJPanel(JPanel userProcessContainer, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        for (Market market : business.getMarketDirectory().getMarketList()) {
            comboMarket.addItem(market);
        }
        calculateSales();
    }

    public void populateTable(ArrayList<Person> personList) {
        // Collections.sort(animalList, Animal.ASCENDING_COMPARATOR);  

        DefaultTableModel dtm = (DefaultTableModel) tblPerson.getModel();
        dtm.setRowCount(0);
        for (Person person : personList) {
            Object[] row = new Object[5];
            row[0] = person;
            row[1] = person.getEmployeeId();
            row[2] = person.getSalary();
            row[3] = person.getUserName();
            row[4] = person.getRole();
            dtm.addRow(row);
        }
    }

    public void calculateSales() {
        double total = 0;
        double target = 0;
        for (Person person : business.getEmployeeDirectory().getPersonList()) {
            if (person.getRole().equals("Sales") && person.getOrderList().size() > 0) {
                for (Order order : person.getOrderList()) {
                    total = total + order.orderTotal();
                    target = target + order.orderTargetTotal();

                }
                //System.out.println("Name"+person.getName()+total+" "+target);
                if ((total - target) > 0) {
                    personAbove.add(person);
                } else if ((total - target) <= 0) {
                    personBelow.add(person);
                }
                total = 0;
                target = 0;
            }
        }
    }

    public void populateTopSales() {
        ArrayList<Person> a = new ArrayList<>();

        for (Person person : business.getEmployeeDirectory().getPersonList()) {
            if (person.getRole().equals("Sales") && person.getOrderList().size() > 0) {
                a.add(person);
            }
        }

        Market market = (Market) comboMarket.getSelectedItem();
        Collections.sort(a, new Comparator<Person>() {
            public int compare(Person o1, Person o2) {
                double ototal = 0;
                double otarget = 0;
                for (Order order : o1.getOrderList()) {
                    if (order.getCustomer().getMarketName().equals(market.getMarketName())) {
                        ototal += order.orderTotal();
                        otarget += order.orderTargetTotal();
                    }
                }

                //  System.out.println(o1.getName()+ototal+"array"+otarget);
                double stotal = 0;
                double starget = 0;
                for (Order order : o2.getOrderList()) {
                    if (order.getCustomer().getMarketName().equals(market.getMarketName())) {
                        stotal += order.orderTotal();
                        starget += order.orderTargetTotal();
                    }
                }
                //System.out.println(o2.getName()+stotal+"array"+starget);
                int x = (int) (otarget - ototal);
                int y = (int) (starget - stotal);
                return (x - y);
            }
        });
        ArrayList<Person> k = new ArrayList<>();

        int count = 0;
        for (Person person : a) {
            k.add(person);
            count++;
            if (count == 10) {
                break;
            }
        }
        populateTable(k);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPerson = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        comboMarket = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        btnBelow = new javax.swing.JButton();
        btnAbove = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "EmpID", "Salary", "UserName", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPerson);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 590, 140));

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 310, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setText("SALES PERSON PERFORMANCE");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 320, 30));

        comboMarket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMarketActionPerformed(evt);
            }
        });
        add(comboMarket, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 150, 30));

        jLabel5.setText("Market Type:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, -1, 30));

        btnBelow.setText("Below Target Sales");
        btnBelow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBelowActionPerformed(evt);
            }
        });
        add(btnBelow, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 180, -1, -1));

        btnAbove.setText("Above Target Sales");
        btnAbove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAboveActionPerformed(evt);
            }
        });
        add(btnAbove, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 150, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAboveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboveActionPerformed
        // TODO add your handling code here:
        populateTable(personAbove);
    }//GEN-LAST:event_btnAboveActionPerformed

    private void btnBelowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBelowActionPerformed
        // TODO add your handling code here:
        populateTable(personBelow);
    }//GEN-LAST:event_btnBelowActionPerformed

    private void comboMarketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMarketActionPerformed
        // TODO add your handling code here:
        populateTopSales();
    }//GEN-LAST:event_comboMarketActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbove;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBelow;
    private javax.swing.JComboBox comboMarket;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPerson;
    // End of variables declaration//GEN-END:variables
}
